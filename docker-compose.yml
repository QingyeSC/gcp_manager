services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: gcp_account_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password_123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-gcp_accounts}
      MYSQL_USER: ${MYSQL_USER:-gcp_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-gcp_password_123}
      TZ: Asia/Shanghai
    ports:
      - "3367:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/logs:/var/log/mysql 
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - gcp_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  # Redis缓存服务（可选，用于会话存储）
  redis:
    image: redis:7-alpine
    container_name: gcp_account_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gcp_network
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_123}

  # GCP账号管理应用
  gcp_manager:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gcp_account_manager
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-gcp_accounts}
      DB_USER: root
      DB_PASSWORD: rootpassword123
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_123}
      
      # New API配置
      NEW_API_BASE_URL: ${NEW_API_BASE_URL:-http://152.53.166.175:3058}
      NEW_API_TOKEN: ${NEW_API_TOKEN}
      MIN_CHANNELS: ${MIN_CHANNELS:-10}
      TARGET_CHANNELS: ${TARGET_CHANNELS:-15}
      
      # Web面板配置
      WEB_HOST: 0.0.0.0
      WEB_PORT: 5000
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      
      # 其他配置
      TZ: Asia/Shanghai
      CHECK_INTERVAL: ${CHECK_INTERVAL:-300}
      
    ports:
      - "5000:5000"
    volumes:
      - ./accounts:/app/accounts
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - gcp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 10s
      retries: 3
      interval: 30s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  gcp_network:
    driver: bridge